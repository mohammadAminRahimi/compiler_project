
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB block \n        | MAIN LRB RRB blockempty : \n        declist : dec \n        | declist dec \n        dec : vardec \n        | funcdec type : INTEGER \n        | FLOAT \n        | BOOLEANiddec : ID \n        | ID LSB exp RSB \n        | ID ASSIGN expidlist : iddec \n        | idlist COMMA iddecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block \n        | FUNCTION ID  LRB paramdecs RRB blockparamdecs : paramdecslist \n        | emptyparamdecslist : paramdec\n        | paramdecslist COMMA paramdecparamdec : ID COLON type\n        | ID LSB RSB COLON typeblock : LCB RCBexp : LSB RSB '
    
_lr_action_items = {'MAIN':([0,2,4,5,6,12,33,42,50,55,],[3,11,-4,-6,-7,-5,-16,-25,-18,-17,]),'FUNCTION':([0,2,4,5,6,12,33,42,50,55,],[8,8,-4,-6,-7,-5,-16,-25,-18,-17,]),'ID':([0,2,4,5,6,8,12,15,26,33,42,46,50,55,],[9,9,-4,-6,-7,16,-5,9,34,-16,-25,34,-18,-17,]),'$end':([1,31,41,42,],[0,-2,-1,-25,]),'LRB':([3,11,16,],[13,19,26,]),'COLON':([7,9,10,25,29,34,39,40,45,48,],[14,-11,-14,-15,-13,43,-26,-12,49,52,]),'COMMA':([7,9,10,22,23,24,25,29,36,38,39,40,47,51,54,],[15,-11,-14,-8,-9,-10,-15,-13,46,-21,-26,-12,-23,-22,-24,]),'LSB':([9,17,18,34,],[17,27,27,44,]),'ASSIGN':([9,],[18,]),'RRB':([13,19,22,23,24,26,35,36,37,38,47,51,54,],[20,30,-8,-9,-10,-3,45,-19,-20,-21,-23,-22,-24,]),'INTEGER':([14,43,49,52,],[22,22,22,22,]),'FLOAT':([14,43,49,52,],[23,23,23,23,]),'BOOLEAN':([14,43,49,52,],[24,24,24,24,]),'LCB':([20,22,23,24,30,45,53,],[32,-8,-9,-10,32,32,32,]),'SEMICOLON':([21,22,23,24,],[33,-8,-9,-10,]),'RSB':([27,28,39,44,],[39,40,-26,48,]),'RCB':([32,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[4,12,]),'vardec':([0,2,],[5,5,]),'funcdec':([0,2,],[6,6,]),'idlist':([0,2,],[7,7,]),'iddec':([0,2,15,],[10,10,25,]),'type':([14,43,49,52,],[21,47,53,54,]),'exp':([17,18,],[28,29,]),'block':([20,30,45,53,],[31,41,50,55,]),'paramdecs':([26,],[35,]),'paramdecslist':([26,],[36,]),'empty':([26,],[37,]),'paramdec':([26,46,],[38,51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',19),
  ('program -> MAIN LRB RRB block','program',4,'p_program','parser.py',20),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',26),
  ('declist -> dec','declist',1,'p_declist_to_dec','parser.py',35),
  ('declist -> declist dec','declist',2,'p_declist_to_dec','parser.py',36),
  ('dec -> vardec','dec',1,'p_dec_to_var_or_func','parser.py',42),
  ('dec -> funcdec','dec',1,'p_dec_to_var_or_func','parser.py',43),
  ('type -> INTEGER','type',1,'p_type_to_type','parser.py',48),
  ('type -> FLOAT','type',1,'p_type_to_type','parser.py',49),
  ('type -> BOOLEAN','type',1,'p_type_to_type','parser.py',50),
  ('iddec -> ID','iddec',1,'p_iddec_to_id','parser.py',55),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec_to_id','parser.py',56),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_to_id','parser.py',57),
  ('idlist -> iddec','idlist',1,'p_idlist_to_iddec','parser.py',62),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist_to_iddec','parser.py',63),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec_to_idlist_and_tyep','parser.py',68),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec_to_dec','parser.py',73),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_to_dec','parser.py',74),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs_to_paramdecslist','parser.py',80),
  ('paramdecs -> empty','paramdecs',1,'p_paramdecs_to_paramdecslist','parser.py',81),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist_to_paramdec','parser.py',86),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist_to_paramdec','parser.py',87),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec_to_id','parser.py',91),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec_to_id','parser.py',92),
  ('block -> LCB RCB','block',2,'p_block_to_statement','parser.py',95),
  ('exp -> LSB RSB','exp',2,'p_temp','parser.py',100),
]
