Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     empty -> <empty>
Rule 4     declist -> dec
Rule 5     declist -> declist dec
Rule 6     dec -> vardec
Rule 7     dec -> funcdec
Rule 8     type -> INTEGER
Rule 9     type -> FLOAT
Rule 10    type -> BOOLEAN
Rule 11    iddec -> ID
Rule 12    iddec -> ID LSB exp RSB
Rule 13    iddec -> ID ASSIGN exp
Rule 14    idlist -> iddec
Rule 15    idlist -> idlist COMMA iddec
Rule 16    vardec -> idlist COLON type SEMICOLON
Rule 17    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 18    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 19    paramdecs -> paramdecslist
Rule 20    paramdecs -> empty
Rule 21    paramdecslist -> paramdec
Rule 22    paramdecslist -> paramdecslist COMMA paramdec
Rule 23    paramdec -> ID COLON type
Rule 24    paramdec -> ID LSB RSB COLON type
Rule 25    lvalue -> ID LSB exp RSB
Rule 26    const -> INTEGERNUMBER
Rule 27    const -> FLOATNUMBER
Rule 28    const -> TRUE
Rule 29    const -> FALSE
Rule 30    exp -> lvalue ASSIGN exp
Rule 31    exp -> ID ASSIGN exp
Rule 32    exp -> ID
Rule 33    exp -> LRB exp RRB
Rule 34    exp -> const
Rule 35    exp -> ID LRB RRB
Rule 36    exp -> ID LRB explist RRB
Rule 37    exp -> lvalue
Rule 38    exp -> SUB exp
Rule 39    exp -> exp SUM exp
Rule 40    exp -> exp SUB exp
Rule 41    exp -> exp MUL exp
Rule 42    exp -> exp DIV exp
Rule 43    exp -> exp MOD exp
Rule 44    exp -> exp GE exp
Rule 45    exp -> exp GT exp
Rule 46    exp -> exp LE exp
Rule 47    exp -> exp LT exp
Rule 48    exp -> exp EQ exp
Rule 49    exp -> exp NE exp
Rule 50    exp -> exp OR exp
Rule 51    exp -> exp AND exp
Rule 52    exp -> NOT exp
Rule 53    explist -> exp
Rule 54    explist -> explist COMMA exp
Rule 55    block -> LCB stmtlist RCB
Rule 56    block -> LCB RCB
Rule 57    stmtlist -> stmt
Rule 58    stmtlist -> stmtlist stmt
Rule 59    cases -> case
Rule 60    cases -> cases case
Rule 61    case -> WHERE const COLON stmtlist
Rule 62    stmt -> matched
Rule 63    stmt -> unmatched
Rule 64    unmatched -> IF LRB exp RRB stmt elseiflist
Rule 65    unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched
Rule 66    unmatched -> IF LRB exp RRB matched ELSE unmatched
Rule 67    unmatched -> IF LRB exp RRB stmt
Rule 68    matched -> RETURN exp SEMICOLON
Rule 69    matched -> exp SEMICOLON
Rule 70    matched -> block
Rule 71    matched -> WHILE LRB exp RRB stmt
Rule 72    matched -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 73    matched -> ON LRB exp RRB LCB RCB SEMICOLON
Rule 74    matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 75    matched -> FOR LRB ID IN ID RRB stmt
Rule 76    matched -> PRINT LRB ID RRB SEMICOLON
Rule 77    matched -> IF LRB exp RRB matched elseiflist ELSE matched
Rule 78    matched -> IF LRB exp RRB matched ELSE matched
Rule 79    matched -> vardec
Rule 80    elseiflist -> ELSEIF LRB exp RRB matched
Rule 81    elseiflist -> elseiflist ELSEIF LRB exp RRB matched

Terminals, with rules where they appear

AND                  : 51
ASSIGN               : 13 30 31
BOOLEAN              : 10
COLON                : 16 17 23 24 61
COMMA                : 15 22 54
DIV                  : 42
ELSE                 : 65 66 77 78
ELSEIF               : 80 81
EQ                   : 48
ERROR                : 
FALSE                : 29
FLOAT                : 9
FLOATNUMBER          : 27
FOR                  : 74 75
FUNCTION             : 17 18
GE                   : 44
GT                   : 45
ID                   : 11 12 13 17 18 23 24 25 31 32 35 36 75 75 76
IF                   : 64 65 66 67 77 78
IN                   : 75
INTEGER              : 8
INTEGERNUMBER        : 26
LCB                  : 55 56 72 73
LE                   : 46
LRB                  : 1 2 17 18 33 35 36 64 65 66 67 71 72 73 74 75 76 77 78 80 81
LSB                  : 12 24 25
LT                   : 47
MAIN                 : 1 2
MOD                  : 43
MUL                  : 41
NE                   : 49
NOT                  : 52
ON                   : 72 73
OR                   : 50
PRINT                : 76
RCB                  : 55 56 72 73
RETURN               : 68
RRB                  : 1 2 17 18 33 35 36 64 65 66 67 71 72 73 74 75 76 77 78 80 81
RSB                  : 12 24 25
SEMICOLON            : 16 68 69 72 73 74 74 76
SUB                  : 38 40
SUM                  : 39
TRUE                 : 28
WHERE                : 61
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

block                : 1 2 17 18 70
case                 : 59 60
cases                : 60 72
const                : 34 61
dec                  : 4 5
declist              : 1 5
elseiflist           : 64 65 77 81
empty                : 20
exp                  : 12 13 25 30 31 33 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 53 54 64 65 66 67 68 69 71 72 73 74 74 74 77 78 80 81
explist              : 36 54
funcdec              : 7
iddec                : 14 15
idlist               : 15 16
lvalue               : 30 37
matched              : 62 65 66 77 77 78 78 80 81
paramdec             : 21 22
paramdecs            : 17 18
paramdecslist        : 19 22
program              : 0
stmt                 : 57 58 64 67 71 74 75
stmtlist             : 55 58 61
type                 : 16 17 23 24
unmatched            : 63 65 66
vardec               : 6 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (4) declist -> . dec
    (5) declist -> . declist dec
    (6) dec -> . vardec
    (7) dec -> . funcdec
    (16) vardec -> . idlist COLON type SEMICOLON
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (18) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (5) declist -> declist . dec
    (6) dec -> . vardec
    (7) dec -> . funcdec
    (16) vardec -> . idlist COLON type SEMICOLON
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (18) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 11
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 12
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 13


state 4

    (4) declist -> dec .

    MAIN            reduce using rule 4 (declist -> dec .)
    FUNCTION        reduce using rule 4 (declist -> dec .)
    ID              reduce using rule 4 (declist -> dec .)


state 5

    (6) dec -> vardec .

    MAIN            reduce using rule 6 (dec -> vardec .)
    FUNCTION        reduce using rule 6 (dec -> vardec .)
    ID              reduce using rule 6 (dec -> vardec .)


state 6

    (7) dec -> funcdec .

    MAIN            reduce using rule 7 (dec -> funcdec .)
    FUNCTION        reduce using rule 7 (dec -> funcdec .)
    ID              reduce using rule 7 (dec -> funcdec .)


state 7

    (16) vardec -> idlist . COLON type SEMICOLON
    (15) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 8

    (17) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (18) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 9

    (11) iddec -> ID .
    (12) iddec -> ID . LSB exp RSB
    (13) iddec -> ID . ASSIGN exp

    COLON           reduce using rule 11 (iddec -> ID .)
    COMMA           reduce using rule 11 (iddec -> ID .)
    LSB             shift and go to state 17
    ASSIGN          shift and go to state 18


state 10

    (14) idlist -> iddec .

    COLON           reduce using rule 14 (idlist -> iddec .)
    COMMA           reduce using rule 14 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 19


state 12

    (5) declist -> declist dec .

    MAIN            reduce using rule 5 (declist -> declist dec .)
    FUNCTION        reduce using rule 5 (declist -> declist dec .)
    ID              reduce using rule 5 (declist -> declist dec .)


state 13

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 20


state 14

    (16) vardec -> idlist COLON . type SEMICOLON
    (8) type -> . INTEGER
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 21

state 15

    (15) idlist -> idlist COMMA . iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    ID              shift and go to state 9

    iddec                          shift and go to state 25

state 16

    (17) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (18) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 26


state 17

    (12) iddec -> ID LSB . exp RSB
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 28
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 18

    (13) iddec -> ID ASSIGN . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 38
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 19

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 39


state 20

    (2) program -> MAIN LRB RRB . block
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB

    LCB             shift and go to state 41

    block                          shift and go to state 40

state 21

    (16) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 42


state 22

    (8) type -> INTEGER .

    SEMICOLON       reduce using rule 8 (type -> INTEGER .)
    COMMA           reduce using rule 8 (type -> INTEGER .)
    RRB             reduce using rule 8 (type -> INTEGER .)
    LCB             reduce using rule 8 (type -> INTEGER .)


state 23

    (9) type -> FLOAT .

    SEMICOLON       reduce using rule 9 (type -> FLOAT .)
    COMMA           reduce using rule 9 (type -> FLOAT .)
    RRB             reduce using rule 9 (type -> FLOAT .)
    LCB             reduce using rule 9 (type -> FLOAT .)


state 24

    (10) type -> BOOLEAN .

    SEMICOLON       reduce using rule 10 (type -> BOOLEAN .)
    COMMA           reduce using rule 10 (type -> BOOLEAN .)
    RRB             reduce using rule 10 (type -> BOOLEAN .)
    LCB             reduce using rule 10 (type -> BOOLEAN .)


state 25

    (15) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 15 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 15 (idlist -> idlist COMMA iddec .)


state 26

    (17) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (18) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (19) paramdecs -> . paramdecslist
    (20) paramdecs -> . empty
    (21) paramdecslist -> . paramdec
    (22) paramdecslist -> . paramdecslist COMMA paramdec
    (3) empty -> .
    (23) paramdec -> . ID COLON type
    (24) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 3 (empty -> .)
    ID              shift and go to state 43

    paramdecs                      shift and go to state 44
    paramdecslist                  shift and go to state 45
    empty                          shift and go to state 46
    paramdec                       shift and go to state 47

state 27

    (31) exp -> ID . ASSIGN exp
    (32) exp -> ID .
    (35) exp -> ID . LRB RRB
    (36) exp -> ID . LRB explist RRB
    (25) lvalue -> ID . LSB exp RSB

    ASSIGN          shift and go to state 48
    RSB             reduce using rule 32 (exp -> ID .)
    SUM             reduce using rule 32 (exp -> ID .)
    SUB             reduce using rule 32 (exp -> ID .)
    MUL             reduce using rule 32 (exp -> ID .)
    DIV             reduce using rule 32 (exp -> ID .)
    MOD             reduce using rule 32 (exp -> ID .)
    GE              reduce using rule 32 (exp -> ID .)
    GT              reduce using rule 32 (exp -> ID .)
    LE              reduce using rule 32 (exp -> ID .)
    LT              reduce using rule 32 (exp -> ID .)
    EQ              reduce using rule 32 (exp -> ID .)
    NE              reduce using rule 32 (exp -> ID .)
    OR              reduce using rule 32 (exp -> ID .)
    AND             reduce using rule 32 (exp -> ID .)
    COLON           reduce using rule 32 (exp -> ID .)
    COMMA           reduce using rule 32 (exp -> ID .)
    RRB             reduce using rule 32 (exp -> ID .)
    SEMICOLON       reduce using rule 32 (exp -> ID .)
    LRB             shift and go to state 49
    LSB             shift and go to state 50


state 28

    (12) iddec -> ID LSB exp . RSB
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 29

    (30) exp -> lvalue . ASSIGN exp
    (37) exp -> lvalue .

    ASSIGN          shift and go to state 65
    RSB             reduce using rule 37 (exp -> lvalue .)
    SUM             reduce using rule 37 (exp -> lvalue .)
    SUB             reduce using rule 37 (exp -> lvalue .)
    MUL             reduce using rule 37 (exp -> lvalue .)
    DIV             reduce using rule 37 (exp -> lvalue .)
    MOD             reduce using rule 37 (exp -> lvalue .)
    GE              reduce using rule 37 (exp -> lvalue .)
    GT              reduce using rule 37 (exp -> lvalue .)
    LE              reduce using rule 37 (exp -> lvalue .)
    LT              reduce using rule 37 (exp -> lvalue .)
    EQ              reduce using rule 37 (exp -> lvalue .)
    NE              reduce using rule 37 (exp -> lvalue .)
    OR              reduce using rule 37 (exp -> lvalue .)
    AND             reduce using rule 37 (exp -> lvalue .)
    COLON           reduce using rule 37 (exp -> lvalue .)
    COMMA           reduce using rule 37 (exp -> lvalue .)
    RRB             reduce using rule 37 (exp -> lvalue .)
    SEMICOLON       reduce using rule 37 (exp -> lvalue .)


state 30

    (33) exp -> LRB . exp RRB
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 66
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 31

    (34) exp -> const .

    RSB             reduce using rule 34 (exp -> const .)
    SUM             reduce using rule 34 (exp -> const .)
    SUB             reduce using rule 34 (exp -> const .)
    MUL             reduce using rule 34 (exp -> const .)
    DIV             reduce using rule 34 (exp -> const .)
    MOD             reduce using rule 34 (exp -> const .)
    GE              reduce using rule 34 (exp -> const .)
    GT              reduce using rule 34 (exp -> const .)
    LE              reduce using rule 34 (exp -> const .)
    LT              reduce using rule 34 (exp -> const .)
    EQ              reduce using rule 34 (exp -> const .)
    NE              reduce using rule 34 (exp -> const .)
    OR              reduce using rule 34 (exp -> const .)
    AND             reduce using rule 34 (exp -> const .)
    COLON           reduce using rule 34 (exp -> const .)
    COMMA           reduce using rule 34 (exp -> const .)
    RRB             reduce using rule 34 (exp -> const .)
    SEMICOLON       reduce using rule 34 (exp -> const .)


state 32

    (38) exp -> SUB . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 67
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 33

    (52) exp -> NOT . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 68
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 34

    (26) const -> INTEGERNUMBER .

    RSB             reduce using rule 26 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 26 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 26 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 26 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 26 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 26 (const -> INTEGERNUMBER .)
    GE              reduce using rule 26 (const -> INTEGERNUMBER .)
    GT              reduce using rule 26 (const -> INTEGERNUMBER .)
    LE              reduce using rule 26 (const -> INTEGERNUMBER .)
    LT              reduce using rule 26 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 26 (const -> INTEGERNUMBER .)
    NE              reduce using rule 26 (const -> INTEGERNUMBER .)
    OR              reduce using rule 26 (const -> INTEGERNUMBER .)
    AND             reduce using rule 26 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 26 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 26 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 26 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 26 (const -> INTEGERNUMBER .)


state 35

    (27) const -> FLOATNUMBER .

    RSB             reduce using rule 27 (const -> FLOATNUMBER .)
    SUM             reduce using rule 27 (const -> FLOATNUMBER .)
    SUB             reduce using rule 27 (const -> FLOATNUMBER .)
    MUL             reduce using rule 27 (const -> FLOATNUMBER .)
    DIV             reduce using rule 27 (const -> FLOATNUMBER .)
    MOD             reduce using rule 27 (const -> FLOATNUMBER .)
    GE              reduce using rule 27 (const -> FLOATNUMBER .)
    GT              reduce using rule 27 (const -> FLOATNUMBER .)
    LE              reduce using rule 27 (const -> FLOATNUMBER .)
    LT              reduce using rule 27 (const -> FLOATNUMBER .)
    EQ              reduce using rule 27 (const -> FLOATNUMBER .)
    NE              reduce using rule 27 (const -> FLOATNUMBER .)
    OR              reduce using rule 27 (const -> FLOATNUMBER .)
    AND             reduce using rule 27 (const -> FLOATNUMBER .)
    COLON           reduce using rule 27 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 27 (const -> FLOATNUMBER .)
    RRB             reduce using rule 27 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 27 (const -> FLOATNUMBER .)


state 36

    (28) const -> TRUE .

    RSB             reduce using rule 28 (const -> TRUE .)
    SUM             reduce using rule 28 (const -> TRUE .)
    SUB             reduce using rule 28 (const -> TRUE .)
    MUL             reduce using rule 28 (const -> TRUE .)
    DIV             reduce using rule 28 (const -> TRUE .)
    MOD             reduce using rule 28 (const -> TRUE .)
    GE              reduce using rule 28 (const -> TRUE .)
    GT              reduce using rule 28 (const -> TRUE .)
    LE              reduce using rule 28 (const -> TRUE .)
    LT              reduce using rule 28 (const -> TRUE .)
    EQ              reduce using rule 28 (const -> TRUE .)
    NE              reduce using rule 28 (const -> TRUE .)
    OR              reduce using rule 28 (const -> TRUE .)
    AND             reduce using rule 28 (const -> TRUE .)
    COLON           reduce using rule 28 (const -> TRUE .)
    COMMA           reduce using rule 28 (const -> TRUE .)
    RRB             reduce using rule 28 (const -> TRUE .)
    SEMICOLON       reduce using rule 28 (const -> TRUE .)


state 37

    (29) const -> FALSE .

    RSB             reduce using rule 29 (const -> FALSE .)
    SUM             reduce using rule 29 (const -> FALSE .)
    SUB             reduce using rule 29 (const -> FALSE .)
    MUL             reduce using rule 29 (const -> FALSE .)
    DIV             reduce using rule 29 (const -> FALSE .)
    MOD             reduce using rule 29 (const -> FALSE .)
    GE              reduce using rule 29 (const -> FALSE .)
    GT              reduce using rule 29 (const -> FALSE .)
    LE              reduce using rule 29 (const -> FALSE .)
    LT              reduce using rule 29 (const -> FALSE .)
    EQ              reduce using rule 29 (const -> FALSE .)
    NE              reduce using rule 29 (const -> FALSE .)
    OR              reduce using rule 29 (const -> FALSE .)
    AND             reduce using rule 29 (const -> FALSE .)
    COLON           reduce using rule 29 (const -> FALSE .)
    COMMA           reduce using rule 29 (const -> FALSE .)
    RRB             reduce using rule 29 (const -> FALSE .)
    SEMICOLON       reduce using rule 29 (const -> FALSE .)


state 38

    (13) iddec -> ID ASSIGN exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    COLON           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 39

    (1) program -> declist MAIN LRB RRB . block
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB

    LCB             shift and go to state 41

    block                          shift and go to state 69

state 40

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 41

    (55) block -> LCB . stmtlist RCB
    (56) block -> LCB . RCB
    (57) stmtlist -> . stmt
    (58) stmtlist -> . stmtlist stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 71
    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    stmtlist                       shift and go to state 70
    stmt                           shift and go to state 72
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    exp                            shift and go to state 76
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 42

    (16) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 16 (vardec -> idlist COLON type SEMICOLON .)


state 43

    (23) paramdec -> ID . COLON type
    (24) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 85
    LSB             shift and go to state 86


state 44

    (17) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (18) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 87


state 45

    (19) paramdecs -> paramdecslist .
    (22) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 19 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 88


state 46

    (20) paramdecs -> empty .

    RRB             reduce using rule 20 (paramdecs -> empty .)


state 47

    (21) paramdecslist -> paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdec .)


state 48

    (31) exp -> ID ASSIGN . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 89
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 49

    (35) exp -> ID LRB . RRB
    (36) exp -> ID LRB . explist RRB
    (53) explist -> . exp
    (54) explist -> . explist COMMA exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    RRB             shift and go to state 90
    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    explist                        shift and go to state 91
    exp                            shift and go to state 92
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 50

    (25) lvalue -> ID LSB . exp RSB
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 93
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 51

    (12) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 12 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 12 (iddec -> ID LSB exp RSB .)


state 52

    (39) exp -> exp SUM . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 94
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 53

    (40) exp -> exp SUB . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 95
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 54

    (41) exp -> exp MUL . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 96
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 55

    (42) exp -> exp DIV . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 97
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 56

    (43) exp -> exp MOD . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 98
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 57

    (44) exp -> exp GE . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 99
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 58

    (45) exp -> exp GT . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 100
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 59

    (46) exp -> exp LE . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 101
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 60

    (47) exp -> exp LT . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 102
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 61

    (48) exp -> exp EQ . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 103
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 62

    (49) exp -> exp NE . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 104
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 63

    (50) exp -> exp OR . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 105
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 64

    (51) exp -> exp AND . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 106
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 65

    (30) exp -> lvalue ASSIGN . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    lvalue                         shift and go to state 29
    exp                            shift and go to state 107
    const                          shift and go to state 31

state 66

    (33) exp -> LRB exp . RRB
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 108
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 67

    (38) exp -> SUB exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 38 (exp -> SUB exp .)
    SUM             reduce using rule 38 (exp -> SUB exp .)
    SUB             reduce using rule 38 (exp -> SUB exp .)
    MUL             reduce using rule 38 (exp -> SUB exp .)
    DIV             reduce using rule 38 (exp -> SUB exp .)
    MOD             reduce using rule 38 (exp -> SUB exp .)
    GE              reduce using rule 38 (exp -> SUB exp .)
    GT              reduce using rule 38 (exp -> SUB exp .)
    LE              reduce using rule 38 (exp -> SUB exp .)
    LT              reduce using rule 38 (exp -> SUB exp .)
    EQ              reduce using rule 38 (exp -> SUB exp .)
    NE              reduce using rule 38 (exp -> SUB exp .)
    OR              reduce using rule 38 (exp -> SUB exp .)
    AND             reduce using rule 38 (exp -> SUB exp .)
    COLON           reduce using rule 38 (exp -> SUB exp .)
    COMMA           reduce using rule 38 (exp -> SUB exp .)
    RRB             reduce using rule 38 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 38 (exp -> SUB exp .)

  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! MUL             [ shift and go to state 54 ]
  ! DIV             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 68

    (52) exp -> NOT exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 52 (exp -> NOT exp .)
    OR              reduce using rule 52 (exp -> NOT exp .)
    AND             reduce using rule 52 (exp -> NOT exp .)
    COLON           reduce using rule 52 (exp -> NOT exp .)
    COMMA           reduce using rule 52 (exp -> NOT exp .)
    RRB             reduce using rule 52 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 52 (exp -> NOT exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 52 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 52 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 52 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 52 (exp -> NOT exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 69

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 70

    (55) block -> LCB stmtlist . RCB
    (58) stmtlist -> stmtlist . stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 109
    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    stmt                           shift and go to state 110
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    exp                            shift and go to state 76
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 71

    (56) block -> LCB RCB .

    $end            reduce using rule 56 (block -> LCB RCB .)
    RCB             reduce using rule 56 (block -> LCB RCB .)
    RETURN          reduce using rule 56 (block -> LCB RCB .)
    WHILE           reduce using rule 56 (block -> LCB RCB .)
    ON              reduce using rule 56 (block -> LCB RCB .)
    FOR             reduce using rule 56 (block -> LCB RCB .)
    PRINT           reduce using rule 56 (block -> LCB RCB .)
    IF              reduce using rule 56 (block -> LCB RCB .)
    ID              reduce using rule 56 (block -> LCB RCB .)
    LRB             reduce using rule 56 (block -> LCB RCB .)
    SUB             reduce using rule 56 (block -> LCB RCB .)
    NOT             reduce using rule 56 (block -> LCB RCB .)
    LCB             reduce using rule 56 (block -> LCB RCB .)
    INTEGERNUMBER   reduce using rule 56 (block -> LCB RCB .)
    FLOATNUMBER     reduce using rule 56 (block -> LCB RCB .)
    TRUE            reduce using rule 56 (block -> LCB RCB .)
    FALSE           reduce using rule 56 (block -> LCB RCB .)
    MAIN            reduce using rule 56 (block -> LCB RCB .)
    FUNCTION        reduce using rule 56 (block -> LCB RCB .)
    ELSE            reduce using rule 56 (block -> LCB RCB .)
    ELSEIF          reduce using rule 56 (block -> LCB RCB .)
    WHERE           reduce using rule 56 (block -> LCB RCB .)


state 72

    (57) stmtlist -> stmt .

    RCB             reduce using rule 57 (stmtlist -> stmt .)
    RETURN          reduce using rule 57 (stmtlist -> stmt .)
    WHILE           reduce using rule 57 (stmtlist -> stmt .)
    ON              reduce using rule 57 (stmtlist -> stmt .)
    FOR             reduce using rule 57 (stmtlist -> stmt .)
    PRINT           reduce using rule 57 (stmtlist -> stmt .)
    IF              reduce using rule 57 (stmtlist -> stmt .)
    ID              reduce using rule 57 (stmtlist -> stmt .)
    LRB             reduce using rule 57 (stmtlist -> stmt .)
    SUB             reduce using rule 57 (stmtlist -> stmt .)
    NOT             reduce using rule 57 (stmtlist -> stmt .)
    LCB             reduce using rule 57 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 57 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 57 (stmtlist -> stmt .)
    TRUE            reduce using rule 57 (stmtlist -> stmt .)
    FALSE           reduce using rule 57 (stmtlist -> stmt .)
    WHERE           reduce using rule 57 (stmtlist -> stmt .)


state 73

    (62) stmt -> matched .

    RCB             reduce using rule 62 (stmt -> matched .)
    RETURN          reduce using rule 62 (stmt -> matched .)
    WHILE           reduce using rule 62 (stmt -> matched .)
    ON              reduce using rule 62 (stmt -> matched .)
    FOR             reduce using rule 62 (stmt -> matched .)
    PRINT           reduce using rule 62 (stmt -> matched .)
    IF              reduce using rule 62 (stmt -> matched .)
    ID              reduce using rule 62 (stmt -> matched .)
    LRB             reduce using rule 62 (stmt -> matched .)
    SUB             reduce using rule 62 (stmt -> matched .)
    NOT             reduce using rule 62 (stmt -> matched .)
    LCB             reduce using rule 62 (stmt -> matched .)
    INTEGERNUMBER   reduce using rule 62 (stmt -> matched .)
    FLOATNUMBER     reduce using rule 62 (stmt -> matched .)
    TRUE            reduce using rule 62 (stmt -> matched .)
    FALSE           reduce using rule 62 (stmt -> matched .)
    ELSE            reduce using rule 62 (stmt -> matched .)
    ELSEIF          reduce using rule 62 (stmt -> matched .)
    WHERE           reduce using rule 62 (stmt -> matched .)


state 74

    (63) stmt -> unmatched .

    RCB             reduce using rule 63 (stmt -> unmatched .)
    RETURN          reduce using rule 63 (stmt -> unmatched .)
    WHILE           reduce using rule 63 (stmt -> unmatched .)
    ON              reduce using rule 63 (stmt -> unmatched .)
    FOR             reduce using rule 63 (stmt -> unmatched .)
    PRINT           reduce using rule 63 (stmt -> unmatched .)
    IF              reduce using rule 63 (stmt -> unmatched .)
    ID              reduce using rule 63 (stmt -> unmatched .)
    LRB             reduce using rule 63 (stmt -> unmatched .)
    SUB             reduce using rule 63 (stmt -> unmatched .)
    NOT             reduce using rule 63 (stmt -> unmatched .)
    LCB             reduce using rule 63 (stmt -> unmatched .)
    INTEGERNUMBER   reduce using rule 63 (stmt -> unmatched .)
    FLOATNUMBER     reduce using rule 63 (stmt -> unmatched .)
    TRUE            reduce using rule 63 (stmt -> unmatched .)
    FALSE           reduce using rule 63 (stmt -> unmatched .)
    ELSE            reduce using rule 63 (stmt -> unmatched .)
    ELSEIF          reduce using rule 63 (stmt -> unmatched .)
    WHERE           reduce using rule 63 (stmt -> unmatched .)


state 75

    (68) matched -> RETURN . exp SEMICOLON
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 111
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 76

    (69) matched -> exp . SEMICOLON
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    SEMICOLON       shift and go to state 112
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 77

    (70) matched -> block .

    RCB             reduce using rule 70 (matched -> block .)
    RETURN          reduce using rule 70 (matched -> block .)
    WHILE           reduce using rule 70 (matched -> block .)
    ON              reduce using rule 70 (matched -> block .)
    FOR             reduce using rule 70 (matched -> block .)
    PRINT           reduce using rule 70 (matched -> block .)
    IF              reduce using rule 70 (matched -> block .)
    ID              reduce using rule 70 (matched -> block .)
    LRB             reduce using rule 70 (matched -> block .)
    SUB             reduce using rule 70 (matched -> block .)
    NOT             reduce using rule 70 (matched -> block .)
    LCB             reduce using rule 70 (matched -> block .)
    INTEGERNUMBER   reduce using rule 70 (matched -> block .)
    FLOATNUMBER     reduce using rule 70 (matched -> block .)
    TRUE            reduce using rule 70 (matched -> block .)
    FALSE           reduce using rule 70 (matched -> block .)
    ELSE            reduce using rule 70 (matched -> block .)
    ELSEIF          reduce using rule 70 (matched -> block .)
    WHERE           reduce using rule 70 (matched -> block .)


state 78

    (71) matched -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 113


state 79

    (72) matched -> ON . LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> ON . LRB exp RRB LCB RCB SEMICOLON

    LRB             shift and go to state 114


state 80

    (74) matched -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 115


state 81

    (31) exp -> ID . ASSIGN exp
    (32) exp -> ID .
    (35) exp -> ID . LRB RRB
    (36) exp -> ID . LRB explist RRB
    (25) lvalue -> ID . LSB exp RSB
    (11) iddec -> ID .
    (12) iddec -> ID . LSB exp RSB
    (13) iddec -> ID . ASSIGN exp

    ASSIGN          shift and go to state 116
    SEMICOLON       reduce using rule 32 (exp -> ID .)
    SUM             reduce using rule 32 (exp -> ID .)
    SUB             reduce using rule 32 (exp -> ID .)
    MUL             reduce using rule 32 (exp -> ID .)
    DIV             reduce using rule 32 (exp -> ID .)
    MOD             reduce using rule 32 (exp -> ID .)
    GE              reduce using rule 32 (exp -> ID .)
    GT              reduce using rule 32 (exp -> ID .)
    LE              reduce using rule 32 (exp -> ID .)
    LT              reduce using rule 32 (exp -> ID .)
    EQ              reduce using rule 32 (exp -> ID .)
    NE              reduce using rule 32 (exp -> ID .)
    OR              reduce using rule 32 (exp -> ID .)
    AND             reduce using rule 32 (exp -> ID .)
    LRB             shift and go to state 49
    LSB             shift and go to state 117
    COLON           reduce using rule 11 (iddec -> ID .)
    COMMA           reduce using rule 11 (iddec -> ID .)


state 82

    (76) matched -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 118


state 83

    (77) matched -> IF . LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> IF . LRB exp RRB matched ELSE matched
    (64) unmatched -> IF . LRB exp RRB stmt elseiflist
    (65) unmatched -> IF . LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> IF . LRB exp RRB matched ELSE unmatched
    (67) unmatched -> IF . LRB exp RRB stmt

    LRB             shift and go to state 119


state 84

    (79) matched -> vardec .

    RCB             reduce using rule 79 (matched -> vardec .)
    RETURN          reduce using rule 79 (matched -> vardec .)
    WHILE           reduce using rule 79 (matched -> vardec .)
    ON              reduce using rule 79 (matched -> vardec .)
    FOR             reduce using rule 79 (matched -> vardec .)
    PRINT           reduce using rule 79 (matched -> vardec .)
    IF              reduce using rule 79 (matched -> vardec .)
    ID              reduce using rule 79 (matched -> vardec .)
    LRB             reduce using rule 79 (matched -> vardec .)
    SUB             reduce using rule 79 (matched -> vardec .)
    NOT             reduce using rule 79 (matched -> vardec .)
    LCB             reduce using rule 79 (matched -> vardec .)
    INTEGERNUMBER   reduce using rule 79 (matched -> vardec .)
    FLOATNUMBER     reduce using rule 79 (matched -> vardec .)
    TRUE            reduce using rule 79 (matched -> vardec .)
    FALSE           reduce using rule 79 (matched -> vardec .)
    ELSE            reduce using rule 79 (matched -> vardec .)
    ELSEIF          reduce using rule 79 (matched -> vardec .)
    WHERE           reduce using rule 79 (matched -> vardec .)


state 85

    (23) paramdec -> ID COLON . type
    (8) type -> . INTEGER
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 120

state 86

    (24) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 121


state 87

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (18) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB

    COLON           shift and go to state 122
    LCB             shift and go to state 41

    block                          shift and go to state 123

state 88

    (22) paramdecslist -> paramdecslist COMMA . paramdec
    (23) paramdec -> . ID COLON type
    (24) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 43

    paramdec                       shift and go to state 124

state 89

    (31) exp -> ID ASSIGN exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 31 (exp -> ID ASSIGN exp .)
    OR              reduce using rule 31 (exp -> ID ASSIGN exp .)
    AND             reduce using rule 31 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 31 (exp -> ID ASSIGN exp .)
    COMMA           reduce using rule 31 (exp -> ID ASSIGN exp .)
    RRB             reduce using rule 31 (exp -> ID ASSIGN exp .)
    SEMICOLON       reduce using rule 31 (exp -> ID ASSIGN exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! GT              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 90

    (35) exp -> ID LRB RRB .

    RSB             reduce using rule 35 (exp -> ID LRB RRB .)
    SUM             reduce using rule 35 (exp -> ID LRB RRB .)
    SUB             reduce using rule 35 (exp -> ID LRB RRB .)
    MUL             reduce using rule 35 (exp -> ID LRB RRB .)
    DIV             reduce using rule 35 (exp -> ID LRB RRB .)
    MOD             reduce using rule 35 (exp -> ID LRB RRB .)
    GE              reduce using rule 35 (exp -> ID LRB RRB .)
    GT              reduce using rule 35 (exp -> ID LRB RRB .)
    LE              reduce using rule 35 (exp -> ID LRB RRB .)
    LT              reduce using rule 35 (exp -> ID LRB RRB .)
    EQ              reduce using rule 35 (exp -> ID LRB RRB .)
    NE              reduce using rule 35 (exp -> ID LRB RRB .)
    OR              reduce using rule 35 (exp -> ID LRB RRB .)
    AND             reduce using rule 35 (exp -> ID LRB RRB .)
    COLON           reduce using rule 35 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 35 (exp -> ID LRB RRB .)
    RRB             reduce using rule 35 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 35 (exp -> ID LRB RRB .)


state 91

    (36) exp -> ID LRB explist . RRB
    (54) explist -> explist . COMMA exp

    RRB             shift and go to state 125
    COMMA           shift and go to state 126


state 92

    (53) explist -> exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             reduce using rule 53 (explist -> exp .)
    COMMA           reduce using rule 53 (explist -> exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 93

    (25) lvalue -> ID LSB exp . RSB
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             shift and go to state 127
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 94

    (39) exp -> exp SUM exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 39 (exp -> exp SUM exp .)
    SUM             reduce using rule 39 (exp -> exp SUM exp .)
    SUB             reduce using rule 39 (exp -> exp SUM exp .)
    GE              reduce using rule 39 (exp -> exp SUM exp .)
    GT              reduce using rule 39 (exp -> exp SUM exp .)
    LE              reduce using rule 39 (exp -> exp SUM exp .)
    LT              reduce using rule 39 (exp -> exp SUM exp .)
    EQ              reduce using rule 39 (exp -> exp SUM exp .)
    NE              reduce using rule 39 (exp -> exp SUM exp .)
    OR              reduce using rule 39 (exp -> exp SUM exp .)
    AND             reduce using rule 39 (exp -> exp SUM exp .)
    COLON           reduce using rule 39 (exp -> exp SUM exp .)
    COMMA           reduce using rule 39 (exp -> exp SUM exp .)
    RRB             reduce using rule 39 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 39 (exp -> exp SUM exp .)
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

  ! MUL             [ reduce using rule 39 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp SUM exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp SUM exp .) ]
  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 95

    (40) exp -> exp SUB exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 40 (exp -> exp SUB exp .)
    SUM             reduce using rule 40 (exp -> exp SUB exp .)
    SUB             reduce using rule 40 (exp -> exp SUB exp .)
    GE              reduce using rule 40 (exp -> exp SUB exp .)
    GT              reduce using rule 40 (exp -> exp SUB exp .)
    LE              reduce using rule 40 (exp -> exp SUB exp .)
    LT              reduce using rule 40 (exp -> exp SUB exp .)
    EQ              reduce using rule 40 (exp -> exp SUB exp .)
    NE              reduce using rule 40 (exp -> exp SUB exp .)
    OR              reduce using rule 40 (exp -> exp SUB exp .)
    AND             reduce using rule 40 (exp -> exp SUB exp .)
    COLON           reduce using rule 40 (exp -> exp SUB exp .)
    COMMA           reduce using rule 40 (exp -> exp SUB exp .)
    RRB             reduce using rule 40 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 40 (exp -> exp SUB exp .)
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

  ! MUL             [ reduce using rule 40 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 40 (exp -> exp SUB exp .) ]
  ! MOD             [ reduce using rule 40 (exp -> exp SUB exp .) ]
  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 96

    (41) exp -> exp MUL exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 41 (exp -> exp MUL exp .)
    SUM             reduce using rule 41 (exp -> exp MUL exp .)
    SUB             reduce using rule 41 (exp -> exp MUL exp .)
    MUL             reduce using rule 41 (exp -> exp MUL exp .)
    DIV             reduce using rule 41 (exp -> exp MUL exp .)
    MOD             reduce using rule 41 (exp -> exp MUL exp .)
    GE              reduce using rule 41 (exp -> exp MUL exp .)
    GT              reduce using rule 41 (exp -> exp MUL exp .)
    LE              reduce using rule 41 (exp -> exp MUL exp .)
    LT              reduce using rule 41 (exp -> exp MUL exp .)
    EQ              reduce using rule 41 (exp -> exp MUL exp .)
    NE              reduce using rule 41 (exp -> exp MUL exp .)
    OR              reduce using rule 41 (exp -> exp MUL exp .)
    AND             reduce using rule 41 (exp -> exp MUL exp .)
    COLON           reduce using rule 41 (exp -> exp MUL exp .)
    COMMA           reduce using rule 41 (exp -> exp MUL exp .)
    RRB             reduce using rule 41 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 41 (exp -> exp MUL exp .)

  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! MUL             [ shift and go to state 54 ]
  ! DIV             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 97

    (42) exp -> exp DIV exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 42 (exp -> exp DIV exp .)
    SUM             reduce using rule 42 (exp -> exp DIV exp .)
    SUB             reduce using rule 42 (exp -> exp DIV exp .)
    MUL             reduce using rule 42 (exp -> exp DIV exp .)
    DIV             reduce using rule 42 (exp -> exp DIV exp .)
    MOD             reduce using rule 42 (exp -> exp DIV exp .)
    GE              reduce using rule 42 (exp -> exp DIV exp .)
    GT              reduce using rule 42 (exp -> exp DIV exp .)
    LE              reduce using rule 42 (exp -> exp DIV exp .)
    LT              reduce using rule 42 (exp -> exp DIV exp .)
    EQ              reduce using rule 42 (exp -> exp DIV exp .)
    NE              reduce using rule 42 (exp -> exp DIV exp .)
    OR              reduce using rule 42 (exp -> exp DIV exp .)
    AND             reduce using rule 42 (exp -> exp DIV exp .)
    COLON           reduce using rule 42 (exp -> exp DIV exp .)
    COMMA           reduce using rule 42 (exp -> exp DIV exp .)
    RRB             reduce using rule 42 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 42 (exp -> exp DIV exp .)

  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! MUL             [ shift and go to state 54 ]
  ! DIV             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 98

    (43) exp -> exp MOD exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 43 (exp -> exp MOD exp .)
    SUM             reduce using rule 43 (exp -> exp MOD exp .)
    SUB             reduce using rule 43 (exp -> exp MOD exp .)
    MUL             reduce using rule 43 (exp -> exp MOD exp .)
    DIV             reduce using rule 43 (exp -> exp MOD exp .)
    MOD             reduce using rule 43 (exp -> exp MOD exp .)
    GE              reduce using rule 43 (exp -> exp MOD exp .)
    GT              reduce using rule 43 (exp -> exp MOD exp .)
    LE              reduce using rule 43 (exp -> exp MOD exp .)
    LT              reduce using rule 43 (exp -> exp MOD exp .)
    EQ              reduce using rule 43 (exp -> exp MOD exp .)
    NE              reduce using rule 43 (exp -> exp MOD exp .)
    OR              reduce using rule 43 (exp -> exp MOD exp .)
    AND             reduce using rule 43 (exp -> exp MOD exp .)
    COLON           reduce using rule 43 (exp -> exp MOD exp .)
    COMMA           reduce using rule 43 (exp -> exp MOD exp .)
    RRB             reduce using rule 43 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 43 (exp -> exp MOD exp .)

  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! MUL             [ shift and go to state 54 ]
  ! DIV             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 99

    (44) exp -> exp GE exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 44 (exp -> exp GE exp .)
    GE              reduce using rule 44 (exp -> exp GE exp .)
    GT              reduce using rule 44 (exp -> exp GE exp .)
    EQ              reduce using rule 44 (exp -> exp GE exp .)
    NE              reduce using rule 44 (exp -> exp GE exp .)
    OR              reduce using rule 44 (exp -> exp GE exp .)
    AND             reduce using rule 44 (exp -> exp GE exp .)
    COLON           reduce using rule 44 (exp -> exp GE exp .)
    COMMA           reduce using rule 44 (exp -> exp GE exp .)
    RRB             reduce using rule 44 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 44 (exp -> exp GE exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    LE              shift and go to state 59
    LT              shift and go to state 60

  ! SUM             [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! LE              [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! LT              [ reduce using rule 44 (exp -> exp GE exp .) ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 100

    (45) exp -> exp GT exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 45 (exp -> exp GT exp .)
    GE              reduce using rule 45 (exp -> exp GT exp .)
    GT              reduce using rule 45 (exp -> exp GT exp .)
    EQ              reduce using rule 45 (exp -> exp GT exp .)
    NE              reduce using rule 45 (exp -> exp GT exp .)
    OR              reduce using rule 45 (exp -> exp GT exp .)
    AND             reduce using rule 45 (exp -> exp GT exp .)
    COLON           reduce using rule 45 (exp -> exp GT exp .)
    COMMA           reduce using rule 45 (exp -> exp GT exp .)
    RRB             reduce using rule 45 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 45 (exp -> exp GT exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    LE              shift and go to state 59
    LT              shift and go to state 60

  ! SUM             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! LE              [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! LT              [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 101

    (46) exp -> exp LE exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 46 (exp -> exp LE exp .)
    GE              reduce using rule 46 (exp -> exp LE exp .)
    GT              reduce using rule 46 (exp -> exp LE exp .)
    LE              reduce using rule 46 (exp -> exp LE exp .)
    LT              reduce using rule 46 (exp -> exp LE exp .)
    EQ              reduce using rule 46 (exp -> exp LE exp .)
    NE              reduce using rule 46 (exp -> exp LE exp .)
    OR              reduce using rule 46 (exp -> exp LE exp .)
    AND             reduce using rule 46 (exp -> exp LE exp .)
    COLON           reduce using rule 46 (exp -> exp LE exp .)
    COMMA           reduce using rule 46 (exp -> exp LE exp .)
    RRB             reduce using rule 46 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 46 (exp -> exp LE exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

  ! SUM             [ reduce using rule 46 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 46 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 46 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 46 (exp -> exp LE exp .) ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 102

    (47) exp -> exp LT exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 47 (exp -> exp LT exp .)
    GE              reduce using rule 47 (exp -> exp LT exp .)
    GT              reduce using rule 47 (exp -> exp LT exp .)
    LE              reduce using rule 47 (exp -> exp LT exp .)
    LT              reduce using rule 47 (exp -> exp LT exp .)
    EQ              reduce using rule 47 (exp -> exp LT exp .)
    NE              reduce using rule 47 (exp -> exp LT exp .)
    OR              reduce using rule 47 (exp -> exp LT exp .)
    AND             reduce using rule 47 (exp -> exp LT exp .)
    COLON           reduce using rule 47 (exp -> exp LT exp .)
    COMMA           reduce using rule 47 (exp -> exp LT exp .)
    RRB             reduce using rule 47 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp LT exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

  ! SUM             [ reduce using rule 47 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 47 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 47 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> exp LT exp .) ]
  ! GE              [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 103

    (48) exp -> exp EQ exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 48 (exp -> exp EQ exp .)
    EQ              reduce using rule 48 (exp -> exp EQ exp .)
    NE              reduce using rule 48 (exp -> exp EQ exp .)
    OR              reduce using rule 48 (exp -> exp EQ exp .)
    AND             reduce using rule 48 (exp -> exp EQ exp .)
    COLON           reduce using rule 48 (exp -> exp EQ exp .)
    COMMA           reduce using rule 48 (exp -> exp EQ exp .)
    RRB             reduce using rule 48 (exp -> exp EQ exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp EQ exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60

  ! SUM             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! GE              [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! GT              [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! LT              [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 104

    (49) exp -> exp NE exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 49 (exp -> exp NE exp .)
    EQ              reduce using rule 49 (exp -> exp NE exp .)
    NE              reduce using rule 49 (exp -> exp NE exp .)
    OR              reduce using rule 49 (exp -> exp NE exp .)
    AND             reduce using rule 49 (exp -> exp NE exp .)
    COLON           reduce using rule 49 (exp -> exp NE exp .)
    COMMA           reduce using rule 49 (exp -> exp NE exp .)
    RRB             reduce using rule 49 (exp -> exp NE exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp NE exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60

  ! SUM             [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! GE              [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! LE              [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 49 (exp -> exp NE exp .) ]
  ! EQ              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 105

    (50) exp -> exp OR exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 50 (exp -> exp OR exp .)
    OR              reduce using rule 50 (exp -> exp OR exp .)
    AND             reduce using rule 50 (exp -> exp OR exp .)
    COLON           reduce using rule 50 (exp -> exp OR exp .)
    COMMA           reduce using rule 50 (exp -> exp OR exp .)
    RRB             reduce using rule 50 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp OR exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 50 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 106

    (51) exp -> exp AND exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 51 (exp -> exp AND exp .)
    OR              reduce using rule 51 (exp -> exp AND exp .)
    AND             reduce using rule 51 (exp -> exp AND exp .)
    COLON           reduce using rule 51 (exp -> exp AND exp .)
    COMMA           reduce using rule 51 (exp -> exp AND exp .)
    RRB             reduce using rule 51 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp AND exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 107

    (30) exp -> lvalue ASSIGN exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    OR              reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    AND             reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 30 (exp -> lvalue ASSIGN exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! GT              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 30 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 108

    (33) exp -> LRB exp RRB .

    RSB             reduce using rule 33 (exp -> LRB exp RRB .)
    SUM             reduce using rule 33 (exp -> LRB exp RRB .)
    SUB             reduce using rule 33 (exp -> LRB exp RRB .)
    MUL             reduce using rule 33 (exp -> LRB exp RRB .)
    DIV             reduce using rule 33 (exp -> LRB exp RRB .)
    MOD             reduce using rule 33 (exp -> LRB exp RRB .)
    GE              reduce using rule 33 (exp -> LRB exp RRB .)
    GT              reduce using rule 33 (exp -> LRB exp RRB .)
    LE              reduce using rule 33 (exp -> LRB exp RRB .)
    LT              reduce using rule 33 (exp -> LRB exp RRB .)
    EQ              reduce using rule 33 (exp -> LRB exp RRB .)
    NE              reduce using rule 33 (exp -> LRB exp RRB .)
    OR              reduce using rule 33 (exp -> LRB exp RRB .)
    AND             reduce using rule 33 (exp -> LRB exp RRB .)
    COLON           reduce using rule 33 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 33 (exp -> LRB exp RRB .)
    RRB             reduce using rule 33 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 33 (exp -> LRB exp RRB .)


state 109

    (55) block -> LCB stmtlist RCB .

    $end            reduce using rule 55 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 55 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 55 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 55 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 55 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 55 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 55 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 55 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 55 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 55 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 55 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 55 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 55 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 55 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 55 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 55 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 55 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 55 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 55 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 55 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 55 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 55 (block -> LCB stmtlist RCB .)


state 110

    (58) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 58 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 58 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 58 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 58 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 58 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 58 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 58 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 58 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 58 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 58 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 58 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 58 (stmtlist -> stmtlist stmt .)


state 111

    (68) matched -> RETURN exp . SEMICOLON
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    SEMICOLON       shift and go to state 128
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 112

    (69) matched -> exp SEMICOLON .

    RCB             reduce using rule 69 (matched -> exp SEMICOLON .)
    RETURN          reduce using rule 69 (matched -> exp SEMICOLON .)
    WHILE           reduce using rule 69 (matched -> exp SEMICOLON .)
    ON              reduce using rule 69 (matched -> exp SEMICOLON .)
    FOR             reduce using rule 69 (matched -> exp SEMICOLON .)
    PRINT           reduce using rule 69 (matched -> exp SEMICOLON .)
    IF              reduce using rule 69 (matched -> exp SEMICOLON .)
    ID              reduce using rule 69 (matched -> exp SEMICOLON .)
    LRB             reduce using rule 69 (matched -> exp SEMICOLON .)
    SUB             reduce using rule 69 (matched -> exp SEMICOLON .)
    NOT             reduce using rule 69 (matched -> exp SEMICOLON .)
    LCB             reduce using rule 69 (matched -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 69 (matched -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 69 (matched -> exp SEMICOLON .)
    TRUE            reduce using rule 69 (matched -> exp SEMICOLON .)
    FALSE           reduce using rule 69 (matched -> exp SEMICOLON .)
    ELSE            reduce using rule 69 (matched -> exp SEMICOLON .)
    ELSEIF          reduce using rule 69 (matched -> exp SEMICOLON .)
    WHERE           reduce using rule 69 (matched -> exp SEMICOLON .)


state 113

    (71) matched -> WHILE LRB . exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 129
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 114

    (72) matched -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (73) matched -> ON LRB . exp RRB LCB RCB SEMICOLON
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 130
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 115

    (74) matched -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> FOR LRB . ID IN ID RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 132
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 131
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 116

    (31) exp -> ID ASSIGN . exp
    (13) iddec -> ID ASSIGN . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 133
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 117

    (25) lvalue -> ID LSB . exp RSB
    (12) iddec -> ID LSB . exp RSB
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 134
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 118

    (76) matched -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 135


state 119

    (77) matched -> IF LRB . exp RRB matched elseiflist ELSE matched
    (78) matched -> IF LRB . exp RRB matched ELSE matched
    (64) unmatched -> IF LRB . exp RRB stmt elseiflist
    (65) unmatched -> IF LRB . exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> IF LRB . exp RRB matched ELSE unmatched
    (67) unmatched -> IF LRB . exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 136
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 120

    (23) paramdec -> ID COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID COLON type .)


state 121

    (24) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 137


state 122

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (8) type -> . INTEGER
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 138

state 123

    (18) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 124

    (22) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)


state 125

    (36) exp -> ID LRB explist RRB .

    RSB             reduce using rule 36 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 36 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 36 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 36 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 36 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 36 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 36 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 36 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 36 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 36 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 36 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 36 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 36 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 36 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 36 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 36 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 36 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 36 (exp -> ID LRB explist RRB .)


state 126

    (54) explist -> explist COMMA . exp
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 139
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 127

    (25) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID LSB exp RSB .)


state 128

    (68) matched -> RETURN exp SEMICOLON .

    RCB             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    ON              reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    IF              reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    ID              reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 68 (matched -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 68 (matched -> RETURN exp SEMICOLON .)


state 129

    (71) matched -> WHILE LRB exp . RRB stmt
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 140
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 130

    (72) matched -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (73) matched -> ON LRB exp . RRB LCB RCB SEMICOLON
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 141
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 131

    (74) matched -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    SEMICOLON       shift and go to state 142
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 132

    (75) matched -> FOR LRB ID . IN ID RRB stmt
    (31) exp -> ID . ASSIGN exp
    (32) exp -> ID .
    (35) exp -> ID . LRB RRB
    (36) exp -> ID . LRB explist RRB
    (25) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 143
    ASSIGN          shift and go to state 48
    SEMICOLON       reduce using rule 32 (exp -> ID .)
    SUM             reduce using rule 32 (exp -> ID .)
    SUB             reduce using rule 32 (exp -> ID .)
    MUL             reduce using rule 32 (exp -> ID .)
    DIV             reduce using rule 32 (exp -> ID .)
    MOD             reduce using rule 32 (exp -> ID .)
    GE              reduce using rule 32 (exp -> ID .)
    GT              reduce using rule 32 (exp -> ID .)
    LE              reduce using rule 32 (exp -> ID .)
    LT              reduce using rule 32 (exp -> ID .)
    EQ              reduce using rule 32 (exp -> ID .)
    NE              reduce using rule 32 (exp -> ID .)
    OR              reduce using rule 32 (exp -> ID .)
    AND             reduce using rule 32 (exp -> ID .)
    LRB             shift and go to state 49
    LSB             shift and go to state 50


state 133

    (31) exp -> ID ASSIGN exp .
    (13) iddec -> ID ASSIGN exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    SEMICOLON       reduce using rule 31 (exp -> ID ASSIGN exp .)
    OR              reduce using rule 31 (exp -> ID ASSIGN exp .)
    AND             reduce using rule 31 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! SUM             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! GT              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 31 (exp -> ID ASSIGN exp .) ]
  ! OR              [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 134

    (25) lvalue -> ID LSB exp . RSB
    (12) iddec -> ID LSB exp . RSB
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RSB             shift and go to state 144
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 135

    (76) matched -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 145


state 136

    (77) matched -> IF LRB exp . RRB matched elseiflist ELSE matched
    (78) matched -> IF LRB exp . RRB matched ELSE matched
    (64) unmatched -> IF LRB exp . RRB stmt elseiflist
    (65) unmatched -> IF LRB exp . RRB matched elseiflist ELSE unmatched
    (66) unmatched -> IF LRB exp . RRB matched ELSE unmatched
    (67) unmatched -> IF LRB exp . RRB stmt
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 146
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 137

    (24) paramdec -> ID LSB RSB COLON . type
    (8) type -> . INTEGER
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 147

state 138

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB

    LCB             shift and go to state 41

    block                          shift and go to state 148

state 139

    (54) explist -> explist COMMA exp .
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             reduce using rule 54 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 54 (explist -> explist COMMA exp .)
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 140

    (71) matched -> WHILE LRB exp RRB . stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    stmt                           shift and go to state 149
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 141

    (72) matched -> ON LRB exp RRB . LCB cases RCB SEMICOLON
    (73) matched -> ON LRB exp RRB . LCB RCB SEMICOLON

    LCB             shift and go to state 150


state 142

    (74) matched -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 151
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 143

    (75) matched -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 152


state 144

    (25) lvalue -> ID LSB exp RSB .
    (12) iddec -> ID LSB exp RSB .

    ASSIGN          reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 25 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 12 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 12 (iddec -> ID LSB exp RSB .)


state 145

    (76) matched -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 153


state 146

    (77) matched -> IF LRB exp RRB . matched elseiflist ELSE matched
    (78) matched -> IF LRB exp RRB . matched ELSE matched
    (64) unmatched -> IF LRB exp RRB . stmt elseiflist
    (65) unmatched -> IF LRB exp RRB . matched elseiflist ELSE unmatched
    (66) unmatched -> IF LRB exp RRB . matched ELSE unmatched
    (67) unmatched -> IF LRB exp RRB . stmt
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 154
    stmt                           shift and go to state 155
    unmatched                      shift and go to state 74
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 147

    (24) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 24 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 24 (paramdec -> ID LSB RSB COLON type .)


state 148

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 149

    (71) matched -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 71 (matched -> WHILE LRB exp RRB stmt .)


state 150

    (72) matched -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (73) matched -> ON LRB exp RRB LCB . RCB SEMICOLON
    (59) cases -> . case
    (60) cases -> . cases case
    (61) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 157
    WHERE           shift and go to state 159

    cases                          shift and go to state 156
    case                           shift and go to state 158

state 151

    (74) matched -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    SEMICOLON       shift and go to state 160
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 152

    (75) matched -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 161


state 153

    (76) matched -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 76 (matched -> PRINT LRB ID RRB SEMICOLON .)


state 154

    (77) matched -> IF LRB exp RRB matched . elseiflist ELSE matched
    (78) matched -> IF LRB exp RRB matched . ELSE matched
    (65) unmatched -> IF LRB exp RRB matched . elseiflist ELSE unmatched
    (66) unmatched -> IF LRB exp RRB matched . ELSE unmatched
    (62) stmt -> matched .
    (80) elseiflist -> . ELSEIF LRB exp RRB matched
    (81) elseiflist -> . elseiflist ELSEIF LRB exp RRB matched

    ELSE            shift and go to state 163
    RCB             reduce using rule 62 (stmt -> matched .)
    RETURN          reduce using rule 62 (stmt -> matched .)
    WHILE           reduce using rule 62 (stmt -> matched .)
    ON              reduce using rule 62 (stmt -> matched .)
    FOR             reduce using rule 62 (stmt -> matched .)
    PRINT           reduce using rule 62 (stmt -> matched .)
    IF              reduce using rule 62 (stmt -> matched .)
    ID              reduce using rule 62 (stmt -> matched .)
    LRB             reduce using rule 62 (stmt -> matched .)
    SUB             reduce using rule 62 (stmt -> matched .)
    NOT             reduce using rule 62 (stmt -> matched .)
    LCB             reduce using rule 62 (stmt -> matched .)
    INTEGERNUMBER   reduce using rule 62 (stmt -> matched .)
    FLOATNUMBER     reduce using rule 62 (stmt -> matched .)
    TRUE            reduce using rule 62 (stmt -> matched .)
    FALSE           reduce using rule 62 (stmt -> matched .)
    WHERE           reduce using rule 62 (stmt -> matched .)
    ELSEIF          shift and go to state 164

  ! ELSE            [ reduce using rule 62 (stmt -> matched .) ]
  ! ELSEIF          [ reduce using rule 62 (stmt -> matched .) ]

    elseiflist                     shift and go to state 162

state 155

    (64) unmatched -> IF LRB exp RRB stmt . elseiflist
    (67) unmatched -> IF LRB exp RRB stmt .
    (80) elseiflist -> . ELSEIF LRB exp RRB matched
    (81) elseiflist -> . elseiflist ELSEIF LRB exp RRB matched

    RCB             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    RETURN          reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    WHILE           reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    ON              reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    FOR             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    PRINT           reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    IF              reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    ID              reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    LRB             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    SUB             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    NOT             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    LCB             reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    TRUE            reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    FALSE           reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    ELSE            reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    WHERE           reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .)
    ELSEIF          shift and go to state 164

  ! ELSEIF          [ reduce using rule 67 (unmatched -> IF LRB exp RRB stmt .) ]

    elseiflist                     shift and go to state 165

state 156

    (72) matched -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (60) cases -> cases . case
    (61) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 166
    WHERE           shift and go to state 159

    case                           shift and go to state 167

state 157

    (73) matched -> ON LRB exp RRB LCB RCB . SEMICOLON

    SEMICOLON       shift and go to state 168


state 158

    (59) cases -> case .

    RCB             reduce using rule 59 (cases -> case .)
    WHERE           reduce using rule 59 (cases -> case .)


state 159

    (61) case -> WHERE . const COLON stmtlist
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    const                          shift and go to state 169

state 160

    (74) matched -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 170
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 161

    (75) matched -> FOR LRB ID IN ID RRB . stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    stmt                           shift and go to state 171
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    exp                            shift and go to state 76
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 162

    (77) matched -> IF LRB exp RRB matched elseiflist . ELSE matched
    (65) unmatched -> IF LRB exp RRB matched elseiflist . ELSE unmatched
    (81) elseiflist -> elseiflist . ELSEIF LRB exp RRB matched

    ELSE            shift and go to state 172
    ELSEIF          shift and go to state 173


state 163

    (78) matched -> IF LRB exp RRB matched ELSE . matched
    (66) unmatched -> IF LRB exp RRB matched ELSE . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 174
    unmatched                      shift and go to state 175
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (80) elseiflist -> ELSEIF . LRB exp RRB matched

    LRB             shift and go to state 176


state 165

    (64) unmatched -> IF LRB exp RRB stmt elseiflist .
    (81) elseiflist -> elseiflist . ELSEIF LRB exp RRB matched

    RCB             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    ELSE            reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .)
    ELSEIF          shift and go to state 173

  ! ELSEIF          [ reduce using rule 64 (unmatched -> IF LRB exp RRB stmt elseiflist .) ]


state 166

    (72) matched -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 177


state 167

    (60) cases -> cases case .

    RCB             reduce using rule 60 (cases -> cases case .)
    WHERE           reduce using rule 60 (cases -> cases case .)


state 168

    (73) matched -> ON LRB exp RRB LCB RCB SEMICOLON .

    RCB             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    RETURN          reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHILE           reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ON              reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FOR             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    PRINT           reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    IF              reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ID              reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LRB             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    SUB             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    NOT             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LCB             reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    TRUE            reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FALSE           reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSE            reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSEIF          reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHERE           reduce using rule 73 (matched -> ON LRB exp RRB LCB RCB SEMICOLON .)


state 169

    (61) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 178


state 170

    (74) matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 179
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 171

    (75) matched -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 75 (matched -> FOR LRB ID IN ID RRB stmt .)


state 172

    (77) matched -> IF LRB exp RRB matched elseiflist ELSE . matched
    (65) unmatched -> IF LRB exp RRB matched elseiflist ELSE . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 180
    unmatched                      shift and go to state 181
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 173

    (81) elseiflist -> elseiflist ELSEIF . LRB exp RRB matched

    LRB             shift and go to state 182


state 174

    (78) matched -> IF LRB exp RRB matched ELSE matched .

    RCB             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    RETURN          reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    WHILE           reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    ON              reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    FOR             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    PRINT           reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    IF              reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    ID              reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    LRB             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    SUB             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    NOT             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    LCB             reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    INTEGERNUMBER   reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    FLOATNUMBER     reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    TRUE            reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    FALSE           reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    ELSE            reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    ELSEIF          reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)
    WHERE           reduce using rule 78 (matched -> IF LRB exp RRB matched ELSE matched .)


state 175

    (66) unmatched -> IF LRB exp RRB matched ELSE unmatched .

    RCB             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    RETURN          reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    WHILE           reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    ON              reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    FOR             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    PRINT           reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    IF              reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    ID              reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    LRB             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    SUB             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    NOT             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    LCB             reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    INTEGERNUMBER   reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    FLOATNUMBER     reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    TRUE            reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    FALSE           reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    ELSE            reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    ELSEIF          reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)
    WHERE           reduce using rule 66 (unmatched -> IF LRB exp RRB matched ELSE unmatched .)


state 176

    (80) elseiflist -> ELSEIF LRB . exp RRB matched
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 183
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 177

    (72) matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 72 (matched -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 178

    (61) case -> WHERE const COLON . stmtlist
    (57) stmtlist -> . stmt
    (58) stmtlist -> . stmtlist stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    const                          shift and go to state 31
    stmtlist                       shift and go to state 184
    stmt                           shift and go to state 72
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    exp                            shift and go to state 76
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 179

    (74) matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    stmt                           shift and go to state 185
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 180

    (77) matched -> IF LRB exp RRB matched elseiflist ELSE matched .

    RCB             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    RETURN          reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    WHILE           reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    ON              reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    FOR             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    PRINT           reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    IF              reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    ID              reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    LRB             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    SUB             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    NOT             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    LCB             reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    INTEGERNUMBER   reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    FLOATNUMBER     reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    TRUE            reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    FALSE           reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    ELSE            reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    ELSEIF          reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)
    WHERE           reduce using rule 77 (matched -> IF LRB exp RRB matched elseiflist ELSE matched .)


state 181

    (65) unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .

    RCB             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    RETURN          reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    WHILE           reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    ON              reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    FOR             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    PRINT           reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    IF              reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    ID              reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    LRB             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    SUB             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    NOT             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    LCB             reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    INTEGERNUMBER   reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    FLOATNUMBER     reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    TRUE            reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    FALSE           reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    ELSE            reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    ELSEIF          reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)
    WHERE           reduce using rule 65 (unmatched -> IF LRB exp RRB matched elseiflist ELSE unmatched .)


state 182

    (81) elseiflist -> elseiflist ELSEIF LRB . exp RRB matched
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 186
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 183

    (80) elseiflist -> ELSEIF LRB exp . RRB matched
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 187
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 184

    (61) case -> WHERE const COLON stmtlist .
    (58) stmtlist -> stmtlist . stmt
    (62) stmt -> . matched
    (63) stmt -> . unmatched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (64) unmatched -> . IF LRB exp RRB stmt elseiflist
    (65) unmatched -> . IF LRB exp RRB matched elseiflist ELSE unmatched
    (66) unmatched -> . IF LRB exp RRB matched ELSE unmatched
    (67) unmatched -> . IF LRB exp RRB stmt
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 61 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 61 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 83
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    const                          shift and go to state 31
    stmt                           shift and go to state 110
    matched                        shift and go to state 73
    unmatched                      shift and go to state 74
    exp                            shift and go to state 76
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 185

    (74) matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 74 (matched -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 186

    (81) elseiflist -> elseiflist ELSEIF LRB exp . RRB matched
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 188
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 187

    (80) elseiflist -> ELSEIF LRB exp RRB . matched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 190
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 189
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 188

    (81) elseiflist -> elseiflist ELSEIF LRB exp RRB . matched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 190
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 191
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 189

    (80) elseiflist -> ELSEIF LRB exp RRB matched .

    ELSE            reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    ELSEIF          reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    RCB             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    RETURN          reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    WHILE           reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    ON              reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    FOR             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    PRINT           reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    IF              reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    ID              reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    LRB             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    SUB             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    NOT             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    LCB             reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    INTEGERNUMBER   reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    FLOATNUMBER     reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    TRUE            reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    FALSE           reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)
    WHERE           reduce using rule 80 (elseiflist -> ELSEIF LRB exp RRB matched .)


state 190

    (77) matched -> IF . LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> IF . LRB exp RRB matched ELSE matched

    LRB             shift and go to state 192


state 191

    (81) elseiflist -> elseiflist ELSEIF LRB exp RRB matched .

    ELSE            reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    ELSEIF          reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    RCB             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    RETURN          reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    WHILE           reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    ON              reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    FOR             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    PRINT           reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    IF              reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    ID              reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    LRB             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    SUB             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    NOT             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    LCB             reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    INTEGERNUMBER   reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    FLOATNUMBER     reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    TRUE            reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    FALSE           reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)
    WHERE           reduce using rule 81 (elseiflist -> elseiflist ELSEIF LRB exp RRB matched .)


state 192

    (77) matched -> IF LRB . exp RRB matched elseiflist ELSE matched
    (78) matched -> IF LRB . exp RRB matched ELSE matched
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 193
    lvalue                         shift and go to state 29
    const                          shift and go to state 31

state 193

    (77) matched -> IF LRB exp . RRB matched elseiflist ELSE matched
    (78) matched -> IF LRB exp . RRB matched ELSE matched
    (39) exp -> exp . SUM exp
    (40) exp -> exp . SUB exp
    (41) exp -> exp . MUL exp
    (42) exp -> exp . DIV exp
    (43) exp -> exp . MOD exp
    (44) exp -> exp . GE exp
    (45) exp -> exp . GT exp
    (46) exp -> exp . LE exp
    (47) exp -> exp . LT exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . NE exp
    (50) exp -> exp . OR exp
    (51) exp -> exp . AND exp

    RRB             shift and go to state 194
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GE              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    LT              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 194

    (77) matched -> IF LRB exp RRB . matched elseiflist ELSE matched
    (78) matched -> IF LRB exp RRB . matched ELSE matched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 190
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 195
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 195

    (77) matched -> IF LRB exp RRB matched . elseiflist ELSE matched
    (78) matched -> IF LRB exp RRB matched . ELSE matched
    (80) elseiflist -> . ELSEIF LRB exp RRB matched
    (81) elseiflist -> . elseiflist ELSEIF LRB exp RRB matched

    ELSE            shift and go to state 197
    ELSEIF          shift and go to state 164

    elseiflist                     shift and go to state 196

state 196

    (77) matched -> IF LRB exp RRB matched elseiflist . ELSE matched
    (81) elseiflist -> elseiflist . ELSEIF LRB exp RRB matched

    ELSE            shift and go to state 198
    ELSEIF          shift and go to state 173


state 197

    (78) matched -> IF LRB exp RRB matched ELSE . matched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 190
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 174
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 198

    (77) matched -> IF LRB exp RRB matched elseiflist ELSE . matched
    (68) matched -> . RETURN exp SEMICOLON
    (69) matched -> . exp SEMICOLON
    (70) matched -> . block
    (71) matched -> . WHILE LRB exp RRB stmt
    (72) matched -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (73) matched -> . ON LRB exp RRB LCB RCB SEMICOLON
    (74) matched -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (75) matched -> . FOR LRB ID IN ID RRB stmt
    (76) matched -> . PRINT LRB ID RRB SEMICOLON
    (77) matched -> . IF LRB exp RRB matched elseiflist ELSE matched
    (78) matched -> . IF LRB exp RRB matched ELSE matched
    (79) matched -> . vardec
    (30) exp -> . lvalue ASSIGN exp
    (31) exp -> . ID ASSIGN exp
    (32) exp -> . ID
    (33) exp -> . LRB exp RRB
    (34) exp -> . const
    (35) exp -> . ID LRB RRB
    (36) exp -> . ID LRB explist RRB
    (37) exp -> . lvalue
    (38) exp -> . SUB exp
    (39) exp -> . exp SUM exp
    (40) exp -> . exp SUB exp
    (41) exp -> . exp MUL exp
    (42) exp -> . exp DIV exp
    (43) exp -> . exp MOD exp
    (44) exp -> . exp GE exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LE exp
    (47) exp -> . exp LT exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp NE exp
    (50) exp -> . exp OR exp
    (51) exp -> . exp AND exp
    (52) exp -> . NOT exp
    (55) block -> . LCB stmtlist RCB
    (56) block -> . LCB RCB
    (16) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID LSB exp RSB
    (26) const -> . INTEGERNUMBER
    (27) const -> . FLOATNUMBER
    (28) const -> . TRUE
    (29) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (11) iddec -> . ID
    (12) iddec -> . ID LSB exp RSB
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 75
    WHILE           shift and go to state 78
    ON              shift and go to state 79
    FOR             shift and go to state 80
    PRINT           shift and go to state 82
    IF              shift and go to state 190
    ID              shift and go to state 81
    LRB             shift and go to state 30
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 41
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 76
    matched                        shift and go to state 180
    block                          shift and go to state 77
    vardec                         shift and go to state 84
    lvalue                         shift and go to state 29
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
